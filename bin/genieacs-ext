#!/usr/bin/env -S node -r esm -r ts-node/register/transpile-only

/**
#####################################    File Description    #######################################

This file is an executable file for gneieacs-ext(ension) service. It has only two main things

- Implementations of function to convert error to fault (Fault is predefined standard interface
  to store error occured)
- If any uncaught error occurs on a process run this function.

####################################################################################################
 */

 // This extension service is for converting error to faults we store all errors as faults in db.
import { Fault } from "../lib/types";

const jobs = new Set();
const fileName = process.argv[2];
let script;
/**
 * @description Function to convert error to fault and return as fault
 * @param err pass error as param
 */
function errorToFault(err: Error): Fault {
  if (!err) return null;

  if (!err.name) return { code: "ext", message: `${err}` };

  const fault: Fault = {
    code: `ext.${err.name}`,
    message: err.message,
    detail: {
      name: err.name,
      message: err.message
    }
  };

  if (err.stack) {
    fault.detail["stack"] = err.stack;
    // Trim the stack trace
    const stackTrimIndex = fault.detail["stack"].match(
      /\s+at\s[^\s]+\s\(.*genieacs-ext:.+\)/
    );
    if (stackTrimIndex) {
      fault.detail["stack"] = fault.detail["stack"].slice(
        0,
        stackTrimIndex.index
      );
    }
  }

  return fault;
}
/**
 * When an uncaught exception/error occurs its is passed to errorToFault
 * function to convert into fault and then process.send (process.send is method to
 * communicate back with the process that spawned them) sends all faults to parent process and 
 * clears the set.
 */
process.on("uncaughtException", err => {
  const fault = errorToFault(err);
  jobs.forEach(jobId => {
    process.send([jobId, fault, null]);
  });
  jobs.clear();
  process.disconnect();
});
/**
 * Send error message as well (message is one of property of fault)
 */
process.on("message", message => {
  jobs.add(message[0]);

  if (!script) {
    // cwd = current working directory
    const cwd = process.env["GENIEACS_EXT_DIR"];
    process.chdir(cwd);
    script = require(`${cwd}/${fileName}`);
  }

  const funcName = message[1][0];

  if (!script[funcName]) {
    const fault = {
      code: "ext",
      message: `No such function '${funcName}' in extension '${fileName}'`
    };
    process.send([message[0], fault, null]);
    return;
  }

  script[funcName](message[1].slice(1), (err, res) => {
    if (!jobs.delete(message[0])) return;

    process.send([message[0], errorToFault(err), res]);
  });
});

// Ignore SIGINT
process.on("SIGINT", () => {});
